// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mixer/template/tracespan/tracespan_service.proto

/*
	Package tracespan is a generated protocol buffer package.

	It is generated from these files:
		mixer/template/tracespan/tracespan_service.proto

	It has these top-level messages:
		Type
		HandleTraceSpanRequest
		HandleTraceSpanResponse
		InstanceMsg
		InstanceParam
*/
package tracespan

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "istio.io/api/mixer/adapter/model/v1beta1"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"
import google_rpc "google.golang.org/genproto/googleapis/rpc/status"
import istio_mixer_adapter_model_v1beta11 "istio.io/api/mixer/adapter/model/v1beta1"
import istio_policy_v1beta1 "istio.io/api/policy/v1beta1"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TraceSpan represents an individual span within a distributed trace.
//
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html). Please note that if the datatype of a field is not istio.mixer.adapter.model.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking) must match the datatype of the field.
//
// Example config:
// ```
// apiVersion: "config.istio.io/v1alpha2"
// kind: tracespan
// metadata:
//   name: default
//   namespace: istio-system
// spec:
//   traceId: request.headers["x-b3-traceid"]
//   spanId: request.headers["x-b3-spanid"] | ""
//   parentSpanId: request.headers["x-b3-parentspanid"] | ""
//   spanName: request.path | "/"
//   startTime: request.time
//   endTime: response.time
//   spanTags:
//     http.method: request.method | ""
//     http.status_code: response.code | 200
//     http.url: request.path | ""
//     request.size: request.size | 0
//     response.size: response.size | 0
//     source.ip: source.ip | ip("0.0.0.0")
//     source.service: source.service | ""
//     source.user: source.user | ""
//     source.version: source.labels["version"] | ""
// ```
//
// See also: [Distributed Tracing](https://istio.io/docs/tasks/telemetry/distributed-tracing.html)
// for information on tracing within Istio.
type Type struct {
	// Span tags are a set of <key, value> pairs that provide metadata for the
	// entire span. The values can be specified in the form of expressions.
	//
	// Optional.
	SpanTags map[string]istio_policy_v1beta1.ValueType `protobuf:"bytes,7,rep,name=span_tags,json=spanTags" json:"span_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=istio.policy.v1beta1.ValueType"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptorTracespanService, []int{0} }

func (m *Type) GetSpanTags() map[string]istio_policy_v1beta1.ValueType {
	if m != nil {
		return m.SpanTags
	}
	return nil
}

// Request message for HandleTraceSpan method.
type HandleTraceSpanRequest struct {
	// TraceSpan instances.
	Instances []*Type `protobuf:"bytes,1,rep,name=instances" json:"instances,omitempty"`
	// Adapter specific configuration.
	// Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend] service and therefore
	// opt to receive handler configuration only through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
	// call. In that case, adapter_config would contain the session_id string value with google.protobuf.Any.type_url
	// as "google.protobuf.StringValue".
	AdapterConfig *google_protobuf1.Any `protobuf:"bytes,2,opt,name=adapter_config,json=adapterConfig" json:"adapter_config,omitempty"`
	// Id to dedupe identical requests.
	DedupId string `protobuf:"bytes,3,opt,name=dedup_id,json=dedupId,proto3" json:"dedup_id,omitempty"`
}

func (m *HandleTraceSpanRequest) Reset()      { *m = HandleTraceSpanRequest{} }
func (*HandleTraceSpanRequest) ProtoMessage() {}
func (*HandleTraceSpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTracespanService, []int{1}
}

func (m *HandleTraceSpanRequest) GetInstances() []*Type {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *HandleTraceSpanRequest) GetAdapterConfig() *google_protobuf1.Any {
	if m != nil {
		return m.AdapterConfig
	}
	return nil
}

func (m *HandleTraceSpanRequest) GetDedupId() string {
	if m != nil {
		return m.DedupId
	}
	return ""
}

// Response message for HandleTraceSpan method.
type HandleTraceSpanResponse struct {
	// The success/failure status of HandleTraceSpan call.
	Status *google_rpc.Status `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *HandleTraceSpanResponse) Reset()      { *m = HandleTraceSpanResponse{} }
func (*HandleTraceSpanResponse) ProtoMessage() {}
func (*HandleTraceSpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTracespanService, []int{2}
}

func (m *HandleTraceSpanResponse) GetStatus() *google_rpc.Status {
	if m != nil {
		return m.Status
	}
	return nil
}

// InstanceMsg is constructed by Mixer for the 'tracespan' template.
//
// TraceSpan represents an individual span within a distributed trace.
//
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html). Please note that if the datatype of a field is not istio.mixer.adapter.model.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking) must match the datatype of the field.
//
// Example config:
// ```
// apiVersion: "config.istio.io/v1alpha2"
// kind: tracespan
// metadata:
//   name: default
//   namespace: istio-system
// spec:
//   traceId: request.headers["x-b3-traceid"]
//   spanId: request.headers["x-b3-spanid"] | ""
//   parentSpanId: request.headers["x-b3-parentspanid"] | ""
//   spanName: request.path | "/"
//   startTime: request.time
//   endTime: response.time
//   spanTags:
//     http.method: request.method | ""
//     http.status_code: response.code | 200
//     http.url: request.path | ""
//     request.size: request.size | 0
//     response.size: response.size | 0
//     source.ip: source.ip | ip("0.0.0.0")
//     source.service: source.service | ""
//     source.user: source.user | ""
//     source.version: source.labels["version"] | ""
// ```
//
// See also: [Distributed Tracing](https://istio.io/docs/tasks/telemetry/distributed-tracing.html)
// for information on tracing within Istio.
type InstanceMsg struct {
	// Name of the instance as specified in configuration.
	Name string `protobuf:"bytes,72295727,opt,name=name,proto3" json:"name,omitempty"`
	// Trace ID is the unique identifier for a trace. All spans from the same
	// trace share the same Trace ID.
	//
	// Required.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// Span ID is the unique identifier for a span within a trace. It is assigned
	// when the span is created.
	//
	// Optional.
	SpanId string `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// Parent Span ID is the unique identifier for a parent span of this span
	// instance. If this is a root span, then this field MUST be empty.
	//
	// Optional.
	ParentSpanId string `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	// Span name is a description of the span's operation.
	//
	// For example, the name can be a qualified method name or a file name
	// and a line number where the operation is called. A best practice is to use
	// the same display name within an application and at the same call point.
	// This makes it easier to correlate spans in different traces.
	//
	// Required.
	SpanName string `protobuf:"bytes,4,opt,name=span_name,json=spanName,proto3" json:"span_name,omitempty"`
	// The start time of the span.
	//
	// Required.
	StartTime *istio_mixer_adapter_model_v1beta11.TimeStamp `protobuf:"bytes,5,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	// The end time of the span.
	//
	// Required.
	EndTime *istio_mixer_adapter_model_v1beta11.TimeStamp `protobuf:"bytes,6,opt,name=end_time,json=endTime" json:"end_time,omitempty"`
	// Span tags are a set of <key, value> pairs that provide metadata for the
	// entire span. The values can be specified in the form of expressions.
	//
	// Optional.
	SpanTags map[string]istio_policy_v1beta1.ValueType `protobuf:"bytes,7,rep,name=span_tags,json=spanTags" json:"span_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=istio.policy.v1beta1.ValueType"`
}

func (m *InstanceMsg) Reset()                    { *m = InstanceMsg{} }
func (*InstanceMsg) ProtoMessage()               {}
func (*InstanceMsg) Descriptor() ([]byte, []int) { return fileDescriptorTracespanService, []int{3} }

func (m *InstanceMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InstanceMsg) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *InstanceMsg) GetSpanId() string {
	if m != nil {
		return m.SpanId
	}
	return ""
}

func (m *InstanceMsg) GetParentSpanId() string {
	if m != nil {
		return m.ParentSpanId
	}
	return ""
}

func (m *InstanceMsg) GetSpanName() string {
	if m != nil {
		return m.SpanName
	}
	return ""
}

func (m *InstanceMsg) GetStartTime() *istio_mixer_adapter_model_v1beta11.TimeStamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *InstanceMsg) GetEndTime() *istio_mixer_adapter_model_v1beta11.TimeStamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *InstanceMsg) GetSpanTags() map[string]istio_policy_v1beta1.ValueType {
	if m != nil {
		return m.SpanTags
	}
	return nil
}

type InstanceParam struct {
	TraceId      string            `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId       string            `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ParentSpanId string            `protobuf:"bytes,3,opt,name=parent_span_id,json=parentSpanId,proto3" json:"parent_span_id,omitempty"`
	SpanName     string            `protobuf:"bytes,4,opt,name=span_name,json=spanName,proto3" json:"span_name,omitempty"`
	StartTime    string            `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      string            `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SpanTags     map[string]string `protobuf:"bytes,7,rep,name=span_tags,json=spanTags" json:"span_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InstanceParam) Reset()                    { *m = InstanceParam{} }
func (*InstanceParam) ProtoMessage()               {}
func (*InstanceParam) Descriptor() ([]byte, []int) { return fileDescriptorTracespanService, []int{4} }

func (m *InstanceParam) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *InstanceParam) GetSpanId() string {
	if m != nil {
		return m.SpanId
	}
	return ""
}

func (m *InstanceParam) GetParentSpanId() string {
	if m != nil {
		return m.ParentSpanId
	}
	return ""
}

func (m *InstanceParam) GetSpanName() string {
	if m != nil {
		return m.SpanName
	}
	return ""
}

func (m *InstanceParam) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *InstanceParam) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *InstanceParam) GetSpanTags() map[string]string {
	if m != nil {
		return m.SpanTags
	}
	return nil
}

func init() {
	proto.RegisterType((*Type)(nil), "tracespan.Type")
	proto.RegisterType((*HandleTraceSpanRequest)(nil), "tracespan.HandleTraceSpanRequest")
	proto.RegisterType((*HandleTraceSpanResponse)(nil), "tracespan.HandleTraceSpanResponse")
	proto.RegisterType((*InstanceMsg)(nil), "tracespan.InstanceMsg")
	proto.RegisterType((*InstanceParam)(nil), "tracespan.InstanceParam")
}
func (this *Type) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Type)
	if !ok {
		that2, ok := that.(Type)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.SpanTags) != len(that1.SpanTags) {
		return false
	}
	for i := range this.SpanTags {
		if this.SpanTags[i] != that1.SpanTags[i] {
			return false
		}
	}
	return true
}
func (this *HandleTraceSpanRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HandleTraceSpanRequest)
	if !ok {
		that2, ok := that.(HandleTraceSpanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Instances) != len(that1.Instances) {
		return false
	}
	for i := range this.Instances {
		if !this.Instances[i].Equal(that1.Instances[i]) {
			return false
		}
	}
	if !this.AdapterConfig.Equal(that1.AdapterConfig) {
		return false
	}
	if this.DedupId != that1.DedupId {
		return false
	}
	return true
}
func (this *HandleTraceSpanResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*HandleTraceSpanResponse)
	if !ok {
		that2, ok := that.(HandleTraceSpanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Status.Equal(that1.Status) {
		return false
	}
	return true
}
func (this *InstanceMsg) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceMsg)
	if !ok {
		that2, ok := that.(InstanceMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.TraceId != that1.TraceId {
		return false
	}
	if this.SpanId != that1.SpanId {
		return false
	}
	if this.ParentSpanId != that1.ParentSpanId {
		return false
	}
	if this.SpanName != that1.SpanName {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if len(this.SpanTags) != len(that1.SpanTags) {
		return false
	}
	for i := range this.SpanTags {
		if this.SpanTags[i] != that1.SpanTags[i] {
			return false
		}
	}
	return true
}
func (this *InstanceParam) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*InstanceParam)
	if !ok {
		that2, ok := that.(InstanceParam)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.TraceId != that1.TraceId {
		return false
	}
	if this.SpanId != that1.SpanId {
		return false
	}
	if this.ParentSpanId != that1.ParentSpanId {
		return false
	}
	if this.SpanName != that1.SpanName {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.EndTime != that1.EndTime {
		return false
	}
	if len(this.SpanTags) != len(that1.SpanTags) {
		return false
	}
	for i := range this.SpanTags {
		if this.SpanTags[i] != that1.SpanTags[i] {
			return false
		}
	}
	return true
}
func (this *Type) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracespan.Type{")
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]istio_policy_v1beta1.ValueType{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%#v: %#v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	if this.SpanTags != nil {
		s = append(s, "SpanTags: "+mapStringForSpanTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HandleTraceSpanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tracespan.HandleTraceSpanRequest{")
	if this.Instances != nil {
		s = append(s, "Instances: "+fmt.Sprintf("%#v", this.Instances)+",\n")
	}
	if this.AdapterConfig != nil {
		s = append(s, "AdapterConfig: "+fmt.Sprintf("%#v", this.AdapterConfig)+",\n")
	}
	s = append(s, "DedupId: "+fmt.Sprintf("%#v", this.DedupId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HandleTraceSpanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tracespan.HandleTraceSpanResponse{")
	if this.Status != nil {
		s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstanceMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tracespan.InstanceMsg{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "TraceId: "+fmt.Sprintf("%#v", this.TraceId)+",\n")
	s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	s = append(s, "ParentSpanId: "+fmt.Sprintf("%#v", this.ParentSpanId)+",\n")
	s = append(s, "SpanName: "+fmt.Sprintf("%#v", this.SpanName)+",\n")
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	}
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]istio_policy_v1beta1.ValueType{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%#v: %#v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	if this.SpanTags != nil {
		s = append(s, "SpanTags: "+mapStringForSpanTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InstanceParam) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&tracespan.InstanceParam{")
	s = append(s, "TraceId: "+fmt.Sprintf("%#v", this.TraceId)+",\n")
	s = append(s, "SpanId: "+fmt.Sprintf("%#v", this.SpanId)+",\n")
	s = append(s, "ParentSpanId: "+fmt.Sprintf("%#v", this.ParentSpanId)+",\n")
	s = append(s, "SpanName: "+fmt.Sprintf("%#v", this.SpanName)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]string{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%#v: %#v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	if this.SpanTags != nil {
		s = append(s, "SpanTags: "+mapStringForSpanTags+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTracespanService(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Type) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Type) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpanTags) > 0 {
		for k, _ := range m.SpanTags {
			dAtA[i] = 0x3a
			i++
			v := m.SpanTags[k]
			mapSize := 1 + len(k) + sovTracespanService(uint64(len(k))) + 1 + sovTracespanService(uint64(v))
			i = encodeVarintTracespanService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTracespanService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintTracespanService(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *HandleTraceSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleTraceSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, msg := range m.Instances {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTracespanService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AdapterConfig != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(m.AdapterConfig.Size()))
		n1, err := m.AdapterConfig.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.DedupId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.DedupId)))
		i += copy(dAtA[i:], m.DedupId)
	}
	return i, nil
}

func (m *HandleTraceSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandleTraceSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(m.Status.Size()))
		n2, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *InstanceMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.TraceId)))
		i += copy(dAtA[i:], m.TraceId)
	}
	if len(m.SpanId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.SpanId)))
		i += copy(dAtA[i:], m.SpanId)
	}
	if len(m.ParentSpanId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.ParentSpanId)))
		i += copy(dAtA[i:], m.ParentSpanId)
	}
	if len(m.SpanName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.SpanName)))
		i += copy(dAtA[i:], m.SpanName)
	}
	if m.StartTime != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(m.StartTime.Size()))
		n3, err := m.StartTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.EndTime != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(m.EndTime.Size()))
		n4, err := m.EndTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.SpanTags) > 0 {
		for k, _ := range m.SpanTags {
			dAtA[i] = 0x3a
			i++
			v := m.SpanTags[k]
			mapSize := 1 + len(k) + sovTracespanService(uint64(len(k))) + 1 + sovTracespanService(uint64(v))
			i = encodeVarintTracespanService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTracespanService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintTracespanService(dAtA, i, uint64(v))
		}
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0xe4
		i++
		dAtA[i] = 0x93
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *InstanceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.TraceId)))
		i += copy(dAtA[i:], m.TraceId)
	}
	if len(m.SpanId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.SpanId)))
		i += copy(dAtA[i:], m.SpanId)
	}
	if len(m.ParentSpanId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.ParentSpanId)))
		i += copy(dAtA[i:], m.ParentSpanId)
	}
	if len(m.SpanName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.SpanName)))
		i += copy(dAtA[i:], m.SpanName)
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTracespanService(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.SpanTags) > 0 {
		for k, _ := range m.SpanTags {
			dAtA[i] = 0x3a
			i++
			v := m.SpanTags[k]
			mapSize := 1 + len(k) + sovTracespanService(uint64(len(k))) + 1 + len(v) + sovTracespanService(uint64(len(v)))
			i = encodeVarintTracespanService(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTracespanService(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTracespanService(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func encodeVarintTracespanService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Type) Size() (n int) {
	var l int
	_ = l
	if len(m.SpanTags) > 0 {
		for k, v := range m.SpanTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracespanService(uint64(len(k))) + 1 + sovTracespanService(uint64(v))
			n += mapEntrySize + 1 + sovTracespanService(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HandleTraceSpanRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovTracespanService(uint64(l))
		}
	}
	if m.AdapterConfig != nil {
		l = m.AdapterConfig.Size()
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.DedupId)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	return n
}

func (m *HandleTraceSpanResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovTracespanService(uint64(l))
	}
	return n
}

func (m *InstanceMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.SpanId)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.ParentSpanId)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.SpanName)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTracespanService(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTracespanService(uint64(l))
	}
	if len(m.SpanTags) > 0 {
		for k, v := range m.SpanTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracespanService(uint64(len(k))) + 1 + sovTracespanService(uint64(v))
			n += mapEntrySize + 1 + sovTracespanService(uint64(mapEntrySize))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 5 + l + sovTracespanService(uint64(l))
	}
	return n
}

func (m *InstanceParam) Size() (n int) {
	var l int
	_ = l
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.SpanId)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.ParentSpanId)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.SpanName)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovTracespanService(uint64(l))
	}
	if len(m.SpanTags) > 0 {
		for k, v := range m.SpanTags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTracespanService(uint64(len(k))) + 1 + len(v) + sovTracespanService(uint64(len(v)))
			n += mapEntrySize + 1 + sovTracespanService(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTracespanService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTracespanService(x uint64) (n int) {
	return sovTracespanService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Type) String() string {
	if this == nil {
		return "nil"
	}
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]istio_policy_v1beta1.ValueType{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%v: %v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	s := strings.Join([]string{`&Type{`,
		`SpanTags:` + mapStringForSpanTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *HandleTraceSpanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HandleTraceSpanRequest{`,
		`Instances:` + strings.Replace(fmt.Sprintf("%v", this.Instances), "Type", "Type", 1) + `,`,
		`AdapterConfig:` + strings.Replace(fmt.Sprintf("%v", this.AdapterConfig), "Any", "google_protobuf1.Any", 1) + `,`,
		`DedupId:` + fmt.Sprintf("%v", this.DedupId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HandleTraceSpanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HandleTraceSpanResponse{`,
		`Status:` + strings.Replace(fmt.Sprintf("%v", this.Status), "Status", "google_rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceMsg) String() string {
	if this == nil {
		return "nil"
	}
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]istio_policy_v1beta1.ValueType{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%v: %v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	s := strings.Join([]string{`&InstanceMsg{`,
		`TraceId:` + fmt.Sprintf("%v", this.TraceId) + `,`,
		`SpanId:` + fmt.Sprintf("%v", this.SpanId) + `,`,
		`ParentSpanId:` + fmt.Sprintf("%v", this.ParentSpanId) + `,`,
		`SpanName:` + fmt.Sprintf("%v", this.SpanName) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "TimeStamp", "istio_mixer_adapter_model_v1beta11.TimeStamp", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "TimeStamp", "istio_mixer_adapter_model_v1beta11.TimeStamp", 1) + `,`,
		`SpanTags:` + mapStringForSpanTags + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InstanceParam) String() string {
	if this == nil {
		return "nil"
	}
	keysForSpanTags := make([]string, 0, len(this.SpanTags))
	for k, _ := range this.SpanTags {
		keysForSpanTags = append(keysForSpanTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSpanTags)
	mapStringForSpanTags := "map[string]string{"
	for _, k := range keysForSpanTags {
		mapStringForSpanTags += fmt.Sprintf("%v: %v,", k, this.SpanTags[k])
	}
	mapStringForSpanTags += "}"
	s := strings.Join([]string{`&InstanceParam{`,
		`TraceId:` + fmt.Sprintf("%v", this.TraceId) + `,`,
		`SpanId:` + fmt.Sprintf("%v", this.SpanId) + `,`,
		`ParentSpanId:` + fmt.Sprintf("%v", this.ParentSpanId) + `,`,
		`SpanName:` + fmt.Sprintf("%v", this.SpanName) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`EndTime:` + fmt.Sprintf("%v", this.EndTime) + `,`,
		`SpanTags:` + mapStringForSpanTags + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTracespanService(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Type) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracespanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanTags == nil {
				m.SpanTags = make(map[string]istio_policy_v1beta1.ValueType)
			}
			var mapkey string
			var mapvalue istio_policy_v1beta1.ValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracespanService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracespanService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (istio_policy_v1beta1.ValueType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracespanService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTracespanService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpanTags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracespanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracespanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleTraceSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracespanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleTraceSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleTraceSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, &Type{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdapterConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdapterConfig == nil {
				m.AdapterConfig = &google_protobuf1.Any{}
			}
			if err := m.AdapterConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DedupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DedupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracespanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracespanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandleTraceSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracespanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandleTraceSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandleTraceSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &google_rpc.Status{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracespanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracespanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracespanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentSpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &istio_mixer_adapter_model_v1beta11.TimeStamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &istio_mixer_adapter_model_v1beta11.TimeStamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanTags == nil {
				m.SpanTags = make(map[string]istio_policy_v1beta1.ValueType)
			}
			var mapkey string
			var mapvalue istio_policy_v1beta1.ValueType
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracespanService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracespanService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (istio_policy_v1beta1.ValueType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracespanService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTracespanService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpanTags[mapkey] = mapvalue
			iNdEx = postIndex
		case 72295727:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracespanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracespanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTracespanService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentSpanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentSpanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanTags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTracespanService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpanTags == nil {
				m.SpanTags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTracespanService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTracespanService
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTracespanService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTracespanService
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTracespanService(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTracespanService
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpanTags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTracespanService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTracespanService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTracespanService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTracespanService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTracespanService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTracespanService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTracespanService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTracespanService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTracespanService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTracespanService   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("mixer/template/tracespan/tracespan_service.proto", fileDescriptorTracespanService)
}

var fileDescriptorTracespanService = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xce, 0x24, 0x6d, 0xd2, 0x9d, 0xd8, 0x1f, 0x0c, 0xd5, 0xa6, 0x91, 0x6e, 0x6b, 0x28, 0xa5,
	0x48, 0x9d, 0xb5, 0x11, 0x41, 0xda, 0x53, 0x2d, 0x45, 0x83, 0x28, 0xb2, 0x09, 0xe2, 0x41, 0x08,
	0xd3, 0xec, 0x6b, 0x58, 0xcc, 0xce, 0x8e, 0x3b, 0x93, 0xd2, 0xbd, 0xf9, 0x27, 0x08, 0xfe, 0x01,
	0x7a, 0xf4, 0xe6, 0x3f, 0xe0, 0xc9, 0x93, 0x78, 0x2a, 0x3d, 0x79, 0xb4, 0xab, 0x07, 0x8f, 0x3d,
	0x7a, 0x94, 0x9d, 0xdd, 0xfc, 0xb0, 0x69, 0x2b, 0x08, 0xe2, 0x6d, 0xdf, 0xbe, 0x6f, 0xe6, 0x7d,
	0xef, 0xfb, 0xde, 0x3c, 0x7c, 0xd3, 0x73, 0x0f, 0x20, 0xb0, 0x14, 0x78, 0xa2, 0xc3, 0x14, 0x58,
	0x2a, 0x60, 0x2d, 0x90, 0x82, 0xf1, 0xc1, 0x57, 0x53, 0x42, 0xb0, 0xef, 0xb6, 0x80, 0x8a, 0xc0,
	0x57, 0x3e, 0x31, 0xfa, 0x89, 0xf2, 0x5a, 0x72, 0x98, 0x39, 0x4c, 0x28, 0x08, 0x2c, 0xcf, 0x77,
	0xa0, 0x63, 0xed, 0xaf, 0xef, 0x82, 0x62, 0xeb, 0x16, 0x1c, 0x28, 0xe0, 0xd2, 0xf5, 0xb9, 0x4c,
	0x0e, 0x96, 0xe7, 0xdb, 0xbe, 0xdf, 0xee, 0x80, 0xa5, 0xa3, 0xdd, 0xee, 0x9e, 0xc5, 0x78, 0x98,
	0xa6, 0xe6, 0xd2, 0x54, 0x20, 0x5a, 0x96, 0x54, 0x4c, 0x75, 0x7b, 0x67, 0x56, 0x2e, 0xaa, 0xa0,
	0x42, 0x91, 0x92, 0x2a, 0x2f, 0x0a, 0xbf, 0xe3, 0xb6, 0xc2, 0x7e, 0x6a, 0x9f, 0x75, 0xba, 0xd0,
	0x1c, 0x00, 0x2a, 0x6f, 0x11, 0x1e, 0x6b, 0x84, 0x02, 0xc8, 0x06, 0x36, 0x74, 0x53, 0x8a, 0xb5,
	0x65, 0xa9, 0xb0, 0x94, 0x5b, 0x2d, 0x56, 0x17, 0x68, 0xbf, 0x25, 0x1a, 0x63, 0x68, 0x5d, 0x30,
	0xde, 0x60, 0x6d, 0xb9, 0xc3, 0x55, 0x10, 0xda, 0x13, 0x32, 0x0d, 0xcb, 0xcf, 0xf0, 0xe4, 0x6f,
	0x29, 0x32, 0x83, 0x73, 0xcf, 0x21, 0x2c, 0xa1, 0x25, 0xb4, 0x6a, 0xd8, 0xf1, 0x27, 0xb9, 0x8d,
	0xc7, 0x75, 0xed, 0x52, 0x76, 0x09, 0xad, 0x4e, 0x55, 0x17, 0xa9, 0x2b, 0x95, 0xeb, 0xd3, 0x84,
	0x1e, 0x4d, 0xe9, 0xd1, 0x27, 0x31, 0x24, 0x2e, 0x65, 0x27, 0xe8, 0x8d, 0xec, 0x1d, 0x54, 0x79,
	0x83, 0xf0, 0x95, 0xfb, 0x8c, 0x3b, 0x1d, 0x68, 0xc4, 0x74, 0xe2, 0x4a, 0x36, 0xbc, 0xe8, 0x82,
	0x54, 0xe4, 0x06, 0x36, 0x5c, 0x2e, 0x15, 0xe3, 0x2d, 0x90, 0x25, 0xa4, 0x49, 0x4f, 0x9f, 0x22,
	0x6d, 0x0f, 0x10, 0x64, 0x13, 0x4f, 0xa5, 0x8a, 0x35, 0x5b, 0x3e, 0xdf, 0x73, 0xdb, 0x9a, 0x4d,
	0xb1, 0x3a, 0x4b, 0x13, 0x9d, 0x69, 0xcf, 0x02, 0xba, 0xc5, 0x43, 0x7b, 0x32, 0xc5, 0x6e, 0x6b,
	0x28, 0x99, 0xc7, 0x13, 0x0e, 0x38, 0x5d, 0xd1, 0x74, 0x9d, 0x52, 0x4e, 0x37, 0x56, 0xd0, 0x71,
	0xcd, 0xa9, 0xec, 0xe0, 0xb9, 0x11, 0x82, 0x52, 0xf8, 0x5c, 0x02, 0xb9, 0x8e, 0xf3, 0x89, 0x71,
	0x5a, 0x8c, 0x62, 0x95, 0xf4, 0x4a, 0x05, 0xa2, 0x45, 0xeb, 0x3a, 0x63, 0xa7, 0x88, 0xca, 0x51,
	0x0e, 0x17, 0x6b, 0x29, 0xd9, 0x87, 0x52, 0x57, 0xd4, 0xbd, 0xc4, 0x15, 0x13, 0x29, 0x0b, 0x3a,
	0xae, 0x39, 0x64, 0x0e, 0x17, 0xb4, 0x5b, 0xae, 0xa3, 0x5b, 0x30, 0xec, 0x7c, 0x1c, 0xd6, 0x1c,
	0xb2, 0x8c, 0xa7, 0x04, 0x0b, 0x80, 0xab, 0x66, 0x2f, 0x9f, 0x70, 0xbd, 0x94, 0xfc, 0xad, 0x27,
	0xa8, 0xab, 0xa9, 0xd9, 0x9c, 0x79, 0x50, 0x1a, 0xd3, 0x00, 0xed, 0xe6, 0x23, 0xe6, 0x01, 0x79,
	0x80, 0xb1, 0x54, 0x2c, 0x50, 0x4d, 0xe5, 0x7a, 0x50, 0x1a, 0xd7, 0xb4, 0xd7, 0x52, 0xbf, 0xf4,
	0xd8, 0xd1, 0x54, 0x18, 0xaa, 0xc7, 0xae, 0x6f, 0x5e, 0xc3, 0xf5, 0xa0, 0xae, 0x98, 0x27, 0x6c,
	0x43, 0x9f, 0x8f, 0x63, 0x72, 0x0f, 0x4f, 0x00, 0x77, 0x92, 0xab, 0xf2, 0x7f, 0x71, 0x55, 0x01,
	0xb8, 0xa3, 0x2f, 0xda, 0x1a, 0x9d, 0xcf, 0xe5, 0x21, 0xab, 0x87, 0x74, 0x3b, 0x6f, 0x4c, 0xc9,
	0x65, 0x3c, 0xa6, 0x1b, 0x7e, 0xff, 0xf9, 0x43, 0x45, 0xf7, 0xac, 0xc3, 0x7f, 0x3c, 0xbd, 0x1f,
	0xb3, 0x78, 0xb2, 0x47, 0xee, 0x31, 0x0b, 0x98, 0xf7, 0xbf, 0x6c, 0x5d, 0x18, 0xb1, 0xd5, 0x18,
	0x36, 0x6a, 0xfe, 0x94, 0x51, 0xc6, 0x40, 0xfa, 0xed, 0x51, 0xe9, 0x57, 0xce, 0x90, 0x5e, 0x77,
	0x77, 0xee, 0x8e, 0xd8, 0xfc, 0xb3, 0xca, 0xb3, 0xc3, 0x2a, 0x1b, 0x43, 0x22, 0x56, 0x3b, 0x78,
	0xa6, 0xff, 0xb4, 0xea, 0xc9, 0xd6, 0x25, 0x4f, 0xf1, 0xf4, 0xa9, 0x47, 0x47, 0xae, 0x0d, 0xb1,
	0x3a, 0x7b, 0x63, 0x94, 0x2b, 0x17, 0x41, 0x92, 0x37, 0x7b, 0xb7, 0x7a, 0x78, 0x6c, 0x66, 0xbe,
	0x1c, 0x9b, 0x99, 0x93, 0x63, 0x13, 0xbd, 0x8c, 0x4c, 0xf4, 0x2e, 0x32, 0xd1, 0xa7, 0xc8, 0x44,
	0x87, 0x91, 0x89, 0xbe, 0x46, 0x26, 0xfa, 0x11, 0x99, 0x99, 0x93, 0xc8, 0x44, 0xaf, 0xbe, 0x99,
	0x99, 0x9f, 0x47, 0xdf, 0x5f, 0x67, 0xd1, 0x6e, 0x5e, 0xaf, 0x8e, 0x5b, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xf0, 0x87, 0xb8, 0x87, 0x38, 0x06, 0x00, 0x00,
}
