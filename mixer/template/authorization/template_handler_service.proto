// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

syntax = "proto3";


// The `authorization` template defines parameters for performing policy
// enforcement within Istio. It is primarily concerned with enabling Mixer
//
// The `authorization` template defines parameters for performing policy
// enforcement within Istio. It is primarily concerned with enabling Mixer
// adapters to make decisions about who is allowed to do what.
// In this template, the "who" is defined in a Subject message. The "what" is
// defined in an Action message. During a Mixer Check call, these values
// will be populated based on configuration from request attributes and
// passed to individual authorization adapters to adjudicate.
// 
// Example config:
// 
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: authorization
// metadata:
//   name: authinfo
//   namespace: istio-system
// spec:
//  subject:
//    user: source.user | request.auth.token[user] | ""
//    groups: request.auth.token[groups]
//    properties:
//     iss: request.auth.token["iss"]
//  action:
//    namespace: destination.namespace | "default"
//    service: destination.service | ""
//    path: request.path | "/"
//    method: request.method | "post"
//    properties:
//      version: destination.labels[version] | ""
//  ```
package authorization;

import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";
import "mixer/adapter/model/v1beta1/type.proto";

import "policy/v1beta1/value_type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_CHECK;



/* Infrastructure backend service for template 'authorization'*/
service HandleAuthorizationService {
    // HandleAuthorization is called by Mixer at request-time to deliver 'authorization' instances to
    // to the backend.
    rpc HandleAuthorization(HandleAuthorizationRequest) returns (HandleAuthorizationResponse);
}

// Request message for HandleAuthorization method.
message HandleAuthorizationRequest {

    // Authorization instances.
    repeated Type instances = 1;

    // Adapter specific configuration.
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend] service and therefore
    // opt to receive handler configuration only through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config would contain the session_id string value with google.protobuf.Any.type_url
    // as "google.protobuf.StringValue".
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests.
    string dedup_id = 3;
}

// Response message for HandleAuthorization method.
message HandleAuthorizationResponse {
    // The success/failure status of HandleAuthorization call.
    google.rpc.Status status = 1;
}

/* Request-time payload for 'authorization' template . This is passed to infrastructure backends during request-time using
HandleAuthorizationService */
message InstanceMsg {
  // Name of the instance as specified in configuration.
  string name = 72295727;
  
  // A subject contains a list of attributes that identify
// the caller identity.
  SubjectMsg subject = 1;
  
  // An action defines "how a resource is accessed".
  ActionMsg action = 2;
  
}


// A subject contains a list of attributes that identify
// the caller identity.
message SubjectMsg {
  
  // The user name/ID that the subject represents.
  string user = 1;
  
  // Groups the subject belongs to depending on the authentication mechanism,
// "groups" are normally populated from JWT claim or client certificate.
// The operator can define how it is populated when creating an instance of
// the template.
  string groups = 2;
  
  // Additional attributes about the subject.
  map<string, istio.mixer.adapter.model.v1beta1.Value> properties = 3;
  
}

// An action defines "how a resource is accessed".
message ActionMsg {
  
  // Namespace the target action is taking place in.
  string namespace = 1;
  
  // The Service the action is being taken on.
  string service = 2;
  
  // What action is being taken.
  string method = 3;
  
  // HTTP REST path within the service
  string path = 4;
  
  // Additional data about the action for use in policy.
  map<string, istio.mixer.adapter.model.v1beta1.Value> properties = 5;
  
}






/* Type InstanceMsg for template 'authorization'. This is passed to infrastructure backends during request-time using
HandleAuthorizationService */
message Type {
  
  // A subject contains a list of attributes that identify
// the caller identity.
  SubjectType subject = 1;
  // An action defines "how a resource is accessed".
  ActionType action = 2;
}


// A subject contains a list of attributes that identify
// the caller identity.
message SubjectType {
  
  // Additional attributes about the subject.
  map<string, istio.policy.v1beta1.ValueType> properties = 3;
}

// An action defines "how a resource is accessed".
message ActionType {
  
  // Additional data about the action for use in policy.
  map<string, istio.policy.v1beta1.ValueType> properties = 5;
}




// The `authorization` template defines parameters for performing policy
// enforcement within Istio. It is primarily concerned with enabling Mixer
// adapters to make decisions about who is allowed to do what.
// In this template, the "who" is defined in a Subject message. The "what" is
// defined in an Action message. During a Mixer Check call, these values
// will be populated based on configuration from request attributes and
// passed to individual authorization adapters to adjudicate.
// 
// Example config:
// 
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: authorization
// metadata:
//   name: authinfo
//   namespace: istio-system
// spec:
//  subject:
//    user: source.user | request.auth.token[user] | ""
//    groups: request.auth.token[groups]
//    properties:
//     iss: request.auth.token["iss"]
//  action:
//    namespace: destination.namespace | "default"
//    service: destination.service | ""
//    path: request.path | "/"
//    method: request.method | "post"
//    properties:
//      version: destination.labels[version] | ""
//  ```
message InstanceParam {
  
  SubjectInstanceParam subject = 1;
  
  ActionInstanceParam action = 2;
  
  
}


message SubjectInstanceParam {
  
  string user = 1;
  
  string groups = 2;
  
  map<string, string> properties = 3;
  
}

message ActionInstanceParam {
  
  string namespace = 1;
  
  string service = 2;
  
  string method = 3;
  
  string path = 4;
  
  map<string, string> properties = 5;
  
}

