// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

syntax = "proto3";


// The `metric` template is designed to let you describe runtime metric to dispatch to
// monitoring backends.
//
// The `metric` template represents a single piece of data to report.
// 
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html). Please note that if the datatype of a field is not istio.mixer.adapter.model.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking) must match the datatype of the field.
// 
// Example config:
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: metric
// metadata:
//   name: requestsize
//   namespace: istio-system
// spec:
//   value: request.size | 0
//   dimensions:
//     source_service: source.service | "unknown"
//     source_version: source.labels["version"] | "unknown"
//     destination_service: destination.service | "unknown"
//     destination_version: destination.labels["version"] | "unknown"
//     response_code: response.code | 200
//   monitored_resource_type: '"UNSPECIFIED"'
// ```
package metric;

import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";
import "mixer/adapter/model/v1beta1/type.proto";

import "policy/v1beta1/value_type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_REPORT;



/* Infrastructure backend service for template 'metric'*/
service HandleMetricService {
    // HandleMetric is called by Mixer at request-time to deliver 'metric' instances to
    // to the backend.
    rpc HandleMetric(HandleMetricRequest) returns (HandleMetricResponse);
}

// Request message for HandleMetric method.
message HandleMetricRequest {

    // Metric instances.
    repeated Type instances = 1;

    // Adapter specific configuration.
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend] service and therefore
    // opt to receive handler configuration only through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config would contain the session_id string value with google.protobuf.Any.type_url
    // as "google.protobuf.StringValue".
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests.
    string dedup_id = 3;
}

// Response message for HandleMetric method.
message HandleMetricResponse {
    // The success/failure status of HandleMetric call.
    google.rpc.Status status = 1;
}

/* Request-time payload for 'metric' template . This is passed to infrastructure backends during request-time using
HandleMetricService */
message InstanceMsg {
  // Name of the instance as specified in configuration.
  string name = 72295727;
  
  // The value being reported.
  istio.mixer.adapter.model.v1beta1.Value value = 1;
  
  // The unique identity of the particular metric to report.
  map<string, istio.mixer.adapter.model.v1beta1.Value> dimensions = 2;
  
  // Optional. An expression to compute the type of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
  string monitored_resource_type = 3;
  
  // Optional. A set of expressions that will form the dimensions of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
  map<string, istio.mixer.adapter.model.v1beta1.Value> monitored_resource_dimensions = 4;
  
}







/* Type InstanceMsg for template 'metric'. This is passed to infrastructure backends during request-time using
HandleMetricService */
message Type {
  
  // The value being reported.
  istio.policy.v1beta1.ValueType value = 1;
  // The unique identity of the particular metric to report.
  map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
  // Optional. A set of expressions that will form the dimensions of the monitored resource this metric is being reported on.
// If the metric backend supports monitored resources, these fields are used to populate that resource. Otherwise
// these fields will be ignored by the adapter.
  map<string, istio.policy.v1beta1.ValueType> monitored_resource_dimensions = 4;
}





// The `metric` template represents a single piece of data to report.
// 
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html). Please note that if the datatype of a field is not istio.mixer.adapter.model.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking) must match the datatype of the field.
// 
// Example config:
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: metric
// metadata:
//   name: requestsize
//   namespace: istio-system
// spec:
//   value: request.size | 0
//   dimensions:
//     source_service: source.service | "unknown"
//     source_version: source.labels["version"] | "unknown"
//     destination_service: destination.service | "unknown"
//     destination_version: destination.labels["version"] | "unknown"
//     response_code: response.code | 200
//   monitored_resource_type: '"UNSPECIFIED"'
// ```
message InstanceParam {
  
  string value = 1;
  
  map<string, string> dimensions = 2;
  
  string monitored_resource_type = 3;
  
  map<string, string> monitored_resource_dimensions = 4;
  
  
}


