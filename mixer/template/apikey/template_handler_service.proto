// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

syntax = "proto3";


// The `apikey` template represents a single API key, which is used for authorization checks.
//
// The `apikey` template represents a single API key, used to authorize API calls.
// 
// Sample config:
// 
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: apikey
// metadata:
//   name: validate-apikey
//   namespace: istio-system
// spec:
//   api: api.service | ""
//   api_version: api.version | ""
//   api_operation: api.operation | ""
//   api_key: api.key | ""
//   timestamp: request.time
// ```
package apikey;

import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";
import "mixer/adapter/model/v1beta1/type.proto";



option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_CHECK;



/* Infrastructure backend service for template 'apikey'*/
service HandleApiKeyService {
    // HandleApiKey is called by Mixer at request-time to deliver 'apikey' instances to
    // to the backend.
    rpc HandleApiKey(HandleApiKeyRequest) returns (HandleApiKeyResponse);
}

// Request message for HandleApiKey method.
message HandleApiKeyRequest {

    // ApiKey instances.
    repeated Type instances = 1;

    // Adapter specific configuration.
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend] service and therefore
    // opt to receive handler configuration only through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config would contain the session_id string value with google.protobuf.Any.type_url
    // as "google.protobuf.StringValue".
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests.
    string dedup_id = 3;
}

// Response message for HandleApiKey method.
message HandleApiKeyResponse {
    // The success/failure status of HandleApiKey call.
    google.rpc.Status status = 1;
}

/* Request-time payload for 'apikey' template . This is passed to infrastructure backends during request-time using
HandleApiKeyService */
message InstanceMsg {
  // Name of the instance as specified in configuration.
  string name = 72295727;
  
  // The API being called (api.service).
  string api = 1;
  
  // The version of the API (api.version).
  string api_version = 2;
  
  // The API operation is being called.
  string api_operation = 3;
  
  // API key used in API call.
  string api_key = 4;
  
  // Timestamp of API call.
  istio.mixer.adapter.model.v1beta1.TimeStamp timestamp = 5;
  
}







/* Type InstanceMsg for template 'apikey'. This is passed to infrastructure backends during request-time using
HandleApiKeyService */
message Type {
  
}





// The `apikey` template represents a single API key, used to authorize API calls.
// 
// Sample config:
// 
// ```yaml
// apiVersion: "config.istio.io/v1alpha2"
// kind: apikey
// metadata:
//   name: validate-apikey
//   namespace: istio-system
// spec:
//   api: api.service | ""
//   api_version: api.version | ""
//   api_operation: api.operation | ""
//   api_key: api.key | ""
//   timestamp: request.time
// ```
message InstanceParam {
  
  string api = 1;
  
  string api_version = 2;
  
  string api_operation = 3;
  
  string api_key = 4;
  
  string timestamp = 5;
  
  
}


