// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

syntax = "proto3";


// The `listentry` template is designed to let you perform list check operations
// with the [list](https://istio.io/docs/reference/config/adapters/list.html) adapter.
//
// The `listentry` template is used to verify the presence/absence of a string
// within a list.
// 
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html). Please note that if the datatype of a field is not istio.mixer.adapter.model.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking) must match the datatype of the field.
// 
// Example config:
// ```
// apiVersion: "config.istio.io/v1alpha2"
// kind: listentry
// metadata:
//   name: appversion
//   namespace: istio-system
// spec:
//   value: source.labels["version"]
// ```
package listentry;

import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";
import "mixer/adapter/model/v1beta1/type.proto";



option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_CHECK;



/* Infrastructure backend service for template 'listentry'*/
service HandleListEntryService {
    // HandleListEntry is called by Mixer at request-time to deliver 'listentry' instances to
    // to the backend.
    rpc HandleListEntry(HandleListEntryRequest) returns (HandleListEntryResponse);
}

// Request message for HandleListEntry method.
message HandleListEntryRequest {

    // ListEntry instances.
    repeated Type instances = 1;

    // Adapter specific configuration.
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend] service and therefore
    // opt to receive handler configuration only through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config would contain the session_id string value with google.protobuf.Any.type_url
    // as "google.protobuf.StringValue".
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests.
    string dedup_id = 3;
}

// Response message for HandleListEntry method.
message HandleListEntryResponse {
    // The success/failure status of HandleListEntry call.
    google.rpc.Status status = 1;
}

/* Request-time payload for 'listentry' template . This is passed to infrastructure backends during request-time using
HandleListEntryService */
message InstanceMsg {
  // Name of the instance as specified in configuration.
  string name = 72295727;
  
  // Specifies the entry to verify in the list.
  string value = 1;
  
}







/* Type InstanceMsg for template 'listentry'. This is passed to infrastructure backends during request-time using
HandleListEntryService */
message Type {
  
}





// The `listentry` template is used to verify the presence/absence of a string
// within a list.
// 
// When writing the configuration, the value for the fields associated with this template can either be a
// literal or an [expression](https://istio.io/docs/reference/config/mixer/expression-language.html). Please note that if the datatype of a field is not istio.mixer.adapter.model.v1beta1.Value,
// then the expression's [inferred type](https://istio.io/docs/reference/config/mixer/expression-language.html#type-checking) must match the datatype of the field.
// 
// Example config:
// ```
// apiVersion: "config.istio.io/v1alpha2"
// kind: listentry
// metadata:
//   name: appversion
//   namespace: istio-system
// spec:
//   value: source.labels["version"]
// ```
message InstanceParam {
  
  string value = 1;
  
  
}


