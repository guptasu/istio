// Copyright 2017 Istio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

syntax = "proto3";

package istio.mixer.adapter.sample.quota;

import "mixer/adapter/model/v1beta1/extensions.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";
import "mixer/adapter/model/v1beta1/type.proto";

import "policy/v1beta1/value_type.proto";

option (istio.mixer.adapter.model.v1beta1.template_variety) = TEMPLATE_VARIETY_QUOTA;





message Type {
  
  
  map<string, istio.policy.v1beta1.ValueType> dimensions = 1;
  
  Res1Type res1 = 11;
}



message Res1Type {
  
  
  istio.policy.v1beta1.ValueType value = 1;
  
  map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
  
  Res2Type res2 = 11;
  
  map<string, Res2Type> res2_map = 12;
}


message Res2Type {
  
  
  istio.policy.v1beta1.ValueType value = 1;
  
  map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
}


/* Infrastructure backend service for template 'quota'*/
service HandleQuotaService {
    // HandleQuota is called by Mixer at request-time to deliver 'quota' instances to
    // to the backend.
    rpc HandleQuota(HandleQuotaRequest) returns (HandleQuotaResponse);
}

// Request message for HandleQuota method.
message HandleQuotaRequest {

    // Quota instances.
    repeated Type instances = 1;

    // Adapter specific configuration.
    // Note: Backends can also implement [InfrastructureBackend][https://istio.io/docs/reference/config/mixer/istio.mixer.adapter.model.v1beta1.html#InfrastructureBackend] service and therefore
    // opt to receive handler configuration only through [InfrastructureBackend.CreateSession][TODO: Link to this fragment]
    // call. In that case, adapter_config would contain the session_id string value with google.protobuf.Any.type_url
    // as "google.protobuf.StringValue".
    google.protobuf.Any adapter_config = 2;

    // Id to dedupe identical requests.
    string dedup_id = 3;
}

// Response message for HandleQuota method.
message HandleQuotaResponse {
    // The success/failure status of HandleQuota call.
    google.rpc.Status status = 1;
}

// InstanceMsg is constructed by Mixer for the 'quota' template.
message InstanceMsg {
  // Name of the instance as specified in configuration.
  string name = 72295727;
  
  
  map<string, istio.policy.v1beta1.ValueType> dimensions = 1;
  
  
  map<string, bool> boolMap = 2;
  
  
  Res1Msg res1 = 11;
  
}



message Res1Msg {
  
  
  istio.policy.v1beta1.ValueType value = 1;
  
  
  map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
  
  
  int64 int64Primitive = 3;
  
  
  bool boolPrimitive = 4;
  
  
  double doublePrimitive = 5;
  
  
  string stringPrimitive = 6;
  
  
  map<string, int64> int64Map = 7;
  
  
  istio.mixer.adapter.model.v1beta1.TimeStamp timeStamp = 9;
  
  
  istio.mixer.adapter.model.v1beta1.Duration duration = 10;
  
  
  Res2Msg res2 = 11;
  
  
  map<string, Res2Msg> res2_map = 12;
  
}


message Res2Msg {
  
  
  istio.policy.v1beta1.ValueType value = 1;
  
  
  map<string, istio.policy.v1beta1.ValueType> dimensions = 2;
  
  
  int64 int64Primitive = 3;
  
}




message InstanceParam {
  
  map<string, string> dimensions = 1;
  
  map<string, string> boolMap = 2;
  
  Res1InstanceParam res1 = 11;
  
  
}


message Res1InstanceParam {
  
  string value = 1;
  
  map<string, string> dimensions = 2;
  
  string int64Primitive = 3;
  
  string boolPrimitive = 4;
  
  string doublePrimitive = 5;
  
  string stringPrimitive = 6;
  
  map<string, string> int64Map = 7;
  
  string timeStamp = 9;
  
  string duration = 10;
  
  Res2InstanceParam res2 = 11;
  
  map<string, Res2InstanceParam> res2_map = 12;
  
}

message Res2InstanceParam {
  
  string value = 1;
  
  map<string, string> dimensions = 2;
  
  string int64Primitive = 3;
  
}


