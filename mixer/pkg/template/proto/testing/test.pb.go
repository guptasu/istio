// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: test.proto

/*
Package testing is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	Instance
	Sub
	InstanceParam
	SubParam
*/
package testing

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Instance struct {
	Int64Primitive  int64             `protobuf:"varint,1,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
	BoolPrimitive   bool              `protobuf:"varint,2,opt,name=boolPrimitive,proto3" json:"boolPrimitive,omitempty"`
	DoublePrimitive float64           `protobuf:"fixed64,3,opt,name=doublePrimitive,proto3" json:"doublePrimitive,omitempty"`
	StringPrimitive string            `protobuf:"bytes,4,opt,name=stringPrimitive,proto3" json:"stringPrimitive,omitempty"`
	Sub             *Sub              `protobuf:"bytes,5,opt,name=sub" json:"sub,omitempty"`
	RepeatedStrings []string          `protobuf:"bytes,6,rep,name=repeatedStrings" json:"repeatedStrings,omitempty"`
	Subs            []*Sub            `protobuf:"bytes,7,rep,name=subs" json:"subs,omitempty"`
	MapPrimitive    map[string]string `protobuf:"bytes,8,rep,name=mapPrimitive" json:"mapPrimitive,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Instance) Reset()                    { *m = Instance{} }
func (m *Instance) String() string            { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()               {}
func (*Instance) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{0} }

func (m *Instance) GetInt64Primitive() int64 {
	if m != nil {
		return m.Int64Primitive
	}
	return 0
}

func (m *Instance) GetBoolPrimitive() bool {
	if m != nil {
		return m.BoolPrimitive
	}
	return false
}

func (m *Instance) GetDoublePrimitive() float64 {
	if m != nil {
		return m.DoublePrimitive
	}
	return 0
}

func (m *Instance) GetStringPrimitive() string {
	if m != nil {
		return m.StringPrimitive
	}
	return ""
}

func (m *Instance) GetSub() *Sub {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *Instance) GetRepeatedStrings() []string {
	if m != nil {
		return m.RepeatedStrings
	}
	return nil
}

func (m *Instance) GetSubs() []*Sub {
	if m != nil {
		return m.Subs
	}
	return nil
}

func (m *Instance) GetMapPrimitive() map[string]string {
	if m != nil {
		return m.MapPrimitive
	}
	return nil
}

type Sub struct {
	Int64Primitive int64 `protobuf:"varint,1,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
}

func (m *Sub) Reset()                    { *m = Sub{} }
func (m *Sub) String() string            { return proto.CompactTextString(m) }
func (*Sub) ProtoMessage()               {}
func (*Sub) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{1} }

func (m *Sub) GetInt64Primitive() int64 {
	if m != nil {
		return m.Int64Primitive
	}
	return 0
}

type InstanceParam struct {
	Int64Primitive  string            `protobuf:"bytes,1,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
	BoolPrimitive   string            `protobuf:"bytes,2,opt,name=boolPrimitive,proto3" json:"boolPrimitive,omitempty"`
	DoublePrimitive string            `protobuf:"bytes,3,opt,name=doublePrimitive,proto3" json:"doublePrimitive,omitempty"`
	StringPrimitive string            `protobuf:"bytes,4,opt,name=stringPrimitive,proto3" json:"stringPrimitive,omitempty"`
	Sub             *SubParam         `protobuf:"bytes,5,opt,name=sub" json:"sub,omitempty"`
	RepeatedStrings []string          `protobuf:"bytes,6,rep,name=repeatedStrings" json:"repeatedStrings,omitempty"`
	Subs            []*SubParam       `protobuf:"bytes,7,rep,name=subs" json:"subs,omitempty"`
	MapPrimitive    map[string]string `protobuf:"bytes,8,rep,name=mapPrimitive" json:"mapPrimitive,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *InstanceParam) Reset()                    { *m = InstanceParam{} }
func (m *InstanceParam) String() string            { return proto.CompactTextString(m) }
func (*InstanceParam) ProtoMessage()               {}
func (*InstanceParam) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{2} }

func (m *InstanceParam) GetInt64Primitive() string {
	if m != nil {
		return m.Int64Primitive
	}
	return ""
}

func (m *InstanceParam) GetBoolPrimitive() string {
	if m != nil {
		return m.BoolPrimitive
	}
	return ""
}

func (m *InstanceParam) GetDoublePrimitive() string {
	if m != nil {
		return m.DoublePrimitive
	}
	return ""
}

func (m *InstanceParam) GetStringPrimitive() string {
	if m != nil {
		return m.StringPrimitive
	}
	return ""
}

func (m *InstanceParam) GetSub() *SubParam {
	if m != nil {
		return m.Sub
	}
	return nil
}

func (m *InstanceParam) GetRepeatedStrings() []string {
	if m != nil {
		return m.RepeatedStrings
	}
	return nil
}

func (m *InstanceParam) GetSubs() []*SubParam {
	if m != nil {
		return m.Subs
	}
	return nil
}

func (m *InstanceParam) GetMapPrimitive() map[string]string {
	if m != nil {
		return m.MapPrimitive
	}
	return nil
}

type SubParam struct {
	Int64Primitive string `protobuf:"bytes,1,opt,name=int64Primitive,proto3" json:"int64Primitive,omitempty"`
}

func (m *SubParam) Reset()                    { *m = SubParam{} }
func (m *SubParam) String() string            { return proto.CompactTextString(m) }
func (*SubParam) ProtoMessage()               {}
func (*SubParam) Descriptor() ([]byte, []int) { return fileDescriptorTest, []int{3} }

func (m *SubParam) GetInt64Primitive() string {
	if m != nil {
		return m.Int64Primitive
	}
	return ""
}

func init() {
	proto.RegisterType((*Instance)(nil), "testing.Instance")
	proto.RegisterType((*Sub)(nil), "testing.Sub")
	proto.RegisterType((*InstanceParam)(nil), "testing.InstanceParam")
	proto.RegisterType((*SubParam)(nil), "testing.SubParam")
}

func init() { proto.RegisterFile("test.proto", fileDescriptorTest) }

var fileDescriptorTest = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcd, 0x4a, 0x33, 0x31,
	0x14, 0x86, 0x49, 0xd3, 0x9f, 0x99, 0xf3, 0xb5, 0x9f, 0x36, 0xb8, 0x18, 0x5c, 0x48, 0x68, 0x55,
	0xb2, 0x71, 0x16, 0x55, 0x44, 0xdc, 0xb8, 0x12, 0x11, 0x14, 0x4a, 0x7a, 0x05, 0x13, 0x1b, 0xca,
	0x60, 0x3b, 0x53, 0xf2, 0x53, 0xe8, 0xed, 0x78, 0x11, 0x5e, 0x9f, 0x24, 0xb5, 0x4e, 0x3b, 0xad,
	0x30, 0x22, 0xee, 0x32, 0x6f, 0x9e, 0x73, 0x38, 0x39, 0x0f, 0x03, 0x60, 0xa4, 0x36, 0xf1, 0x5c,
	0xe5, 0x26, 0x27, 0x2d, 0x77, 0x4e, 0xb3, 0x49, 0xef, 0x0d, 0x43, 0xf0, 0x98, 0x69, 0x93, 0x64,
	0x2f, 0x92, 0x9c, 0xc3, 0xff, 0x34, 0x33, 0xd7, 0x57, 0x43, 0x95, 0xce, 0x52, 0x93, 0x2e, 0x64,
	0x84, 0x28, 0x62, 0x98, 0x97, 0x52, 0x72, 0x0a, 0x1d, 0x91, 0xe7, 0xd3, 0x02, 0xab, 0x51, 0xc4,
	0x02, 0xbe, 0x1d, 0x12, 0x06, 0x07, 0xe3, 0xdc, 0x8a, 0xa9, 0x2c, 0x38, 0x4c, 0x11, 0x43, 0xbc,
	0x1c, 0x3b, 0x52, 0x1b, 0x95, 0x66, 0x93, 0x82, 0xac, 0x53, 0xc4, 0x42, 0x5e, 0x8e, 0xc9, 0x09,
	0x60, 0x6d, 0x45, 0xd4, 0xa0, 0x88, 0xfd, 0x1b, 0xb4, 0xe3, 0xcf, 0x57, 0xc4, 0x23, 0x2b, 0xb8,
	0xbb, 0x70, 0x9d, 0x94, 0x9c, 0xcb, 0xc4, 0xc8, 0xf1, 0xc8, 0x97, 0xea, 0xa8, 0x49, 0xb1, 0xeb,
	0x54, 0x8a, 0x09, 0x85, 0xba, 0xb6, 0x42, 0x47, 0x2d, 0x8a, 0x77, 0x5a, 0xf9, 0x1b, 0xf2, 0x00,
	0xed, 0x59, 0x32, 0x2f, 0x46, 0x0a, 0x3c, 0xd9, 0xff, 0x22, 0xd7, 0x6b, 0x8b, 0x9f, 0x37, 0xa8,
	0xfb, 0xcc, 0xa8, 0x25, 0xdf, 0x2a, 0x3c, 0xbe, 0x83, 0xee, 0x0e, 0x42, 0x0e, 0x01, 0xbf, 0xca,
	0xa5, 0x5f, 0x70, 0xc8, 0xdd, 0x91, 0x1c, 0x41, 0x63, 0x91, 0x4c, 0xed, 0x6a, 0x9b, 0x21, 0x5f,
	0x7d, 0xdc, 0xd6, 0x6e, 0x50, 0xef, 0x02, 0xf0, 0xc8, 0x8a, 0xaa, 0x7a, 0x7a, 0xef, 0x18, 0x3a,
	0xeb, 0xe1, 0x86, 0x89, 0x4a, 0x66, 0xdf, 0x54, 0x86, 0xd5, 0xc4, 0x86, 0x15, 0xc5, 0x86, 0xbf,
	0x11, 0xdb, 0xdf, 0x14, 0xdb, 0xdd, 0xb4, 0xe1, 0x5f, 0xf0, 0x53, 0xbb, 0x67, 0x5b, 0x76, 0xf7,
	0xf4, 0x5b, 0x29, 0x7e, 0xda, 0xab, 0x98, 0xed, 0x28, 0xf6, 0x35, 0x7f, 0xef, 0x79, 0x00, 0xc1,
	0x7a, 0xc0, 0xaa, 0xca, 0x44, 0xd3, 0xff, 0xd0, 0x97, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x95,
	0x80, 0x54, 0xf1, 0xde, 0x03, 0x00, 0x00,
}
